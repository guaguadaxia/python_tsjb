import random
from ctypes import windll, byref
from ctypes.wintypes import HWND, POINT
import string
import time
import win32api
import win32con, win32gui, win32ui
import cv2
import numpy as np
import base64
import  operator
import easyocr


def base642Str(imgBytes):
    base64_data = base64.b64encode(imgBytes)
    return base64_data.decode('utf-8')


scale = 1

from PIL import Image


def getPointOnLine(x1, y1, x2, y2, n):
    """
        鼠标坐标集合移动算法
    """
    x = ((x2 - x1) * n) + x1
    y = ((y2 - y1) * n) + y1
    return int(round(x)), int(round(y))


class win():

    def __init__(self, hwnd):
        self.reader = easyocr.Reader(['ch_sim', 'en'])  # 只需要运行一次就可以将模型加载到内存中

        result = []

        def callback(hwnd, res):
            result.append(hwnd)
            return True

        win32gui.EnumChildWindows(hwnd, callback, '')
        global hwn
        hwn = result[0]
        self.hwnd = hwn
    

    def window_capture(self, Target, A=[0, 0, 0, 0], value=0.95):

        # 获取句柄窗口的大小

        rctA = win32gui.GetWindowRect(self.hwnd)
        rctA = list(rctA)

        w = rctA[2] - rctA[0]
        h = rctA[3] - rctA[1]
        w_A = A[2] - A[0]
        h_A = A[3] - A[1]

        hwndDC = win32gui.GetWindowDC(self.hwnd)
        mfcDC = win32ui.CreateDCFromHandle(hwndDC)
        saveDC = mfcDC.CreateCompatibleDC()
        saveBitMap = win32ui.CreateBitmap()
        saveBitMap.CreateCompatibleBitmap(mfcDC, w_A, h_A)
        saveDC.SelectObject(saveBitMap)
        w_A = A[2] - A[0]
        h_A = A[3] - A[1]
        saveDC.BitBlt((0, 0), (w_A, h_A), mfcDC, (A[0], A[1]), win32con.SRCCOPY)
        # saveBitMap.SaveBitmapFile(saveDC, "img_Winapi.bmp")
        ###获取位图信息
        bmpinfo = saveBitMap.GetInfo()
        bmpstr = saveBitMap.GetBitmapBits(True)

        ###生成图像
        im_PIL_TEMP = Image.frombuffer('RGB', (bmpinfo['bmWidth'], bmpinfo['bmHeight']), bmpstr, 'raw', 'BGRX', 0, 1)
        img = cv2.cvtColor(np.asarray(im_PIL_TEMP), cv2.COLOR_RGB2BGR)
        target = img
        #cv2.imshow('img',img)
        #cv2.waitKey(0)
        # cv2.destroyAllWindows()
        template = cv2.imread(Target)
        # 获得模板图片的高宽尺寸
        theight, twidth = template.shape[:2]
        # 执行模板匹配，采用的匹配方式cv2.TM_SQDIFF_NORMED
        result = cv2.matchTemplate(target, template, cv2.TM_SQDIFF_NORMED)
        # 归一化处理
        cv2.normalize(result, result, 0, 1, cv2.NORM_MINMAX, -1)
        # 寻找矩阵（一维数组当做向量，用Mat定义）中的最大值和最小值的匹配结果及其位置
        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
        # 匹配值转换为字符串
        # 对于cv2.TM_SQDIFF及cv2.TM_SQDIFF_NORMED方法min_val越趋近与0匹配度越好，匹配位置取min_loc
        # 对于其他方法max_val越趋近于1匹配度越好，匹配位置取max_loc
        strmin_val = str(min_val)

        # 绘制矩形边框，将匹配区域标注出来
        # min_loc：矩形定点
        # (min_loc[0]+twidth,min_loc[1]+theight)：矩形的宽高
        # (0,0,225)：矩形的边框颜色；2：矩形边框宽度
        #cv2.rectangle(target, min_loc, (min_loc[0] + twidth, min_loc[1] + theight), (0, 0, 225), 2)
        # 显示结果,并将匹配值显示在标题栏上
        #cv2.imshow("MatchResult----MatchingValue=" + strmin_val, target)
        #cv2.waitKey()
        #cv2.destroyAllWindows()

        win32gui.DeleteObject(saveBitMap.GetHandle())
        mfcDC.DeleteDC()
        saveDC.DeleteDC()
        win32gui.ReleaseDC(self.hwnd, hwndDC)
        if float(strmin_val) >= -0.05 and float(strmin_val) <= 0.05 and min_loc[0] != 0 and min_loc[1] != 0:

            return min_loc[0] + A[0], min_loc[1] + A[1]
        else:

            return 0, 0

    def window_str(self, A=[0, 0, 0, 0], textType='ft', bor=False, pic_id=None):
        # 获取句柄窗口的大小
        # if pic_id:
        #     json = {'pic_id': pic_id, 'class': 'rxjh'}
        #     requests.post(url='http://47.98.177.143:34971/ImageOCR/', json=json).json()

        rctA = win32gui.GetWindowRect(self.hwnd)
        rctA = list(rctA)

        w = rctA[2] - rctA[0]
        h = rctA[3] - rctA[1]
        w_A = A[2] - A[0]
        h_A = A[3] - A[1]

        hwndDC = win32gui.GetWindowDC(self.hwnd)
        mfcDC = win32ui.CreateDCFromHandle(hwndDC)
        saveDC = mfcDC.CreateCompatibleDC()
        saveBitMap = win32ui.CreateBitmap()
        saveBitMap.CreateCompatibleBitmap(mfcDC, w_A, h_A)
        saveDC.SelectObject(saveBitMap)
        w_A = A[2] - A[0]
        h_A = A[3] - A[1]
        saveDC.BitBlt((0, 0), (w_A, h_A), mfcDC, (A[0], A[1]), win32con.SRCCOPY)
        # saveBitMap.SaveBitmapFile(saveDC, "img_Winapi.bmp")
        ###获取位图信息
        bmpinfo = saveBitMap.GetInfo()
        bmpstr = saveBitMap.GetBitmapBits(True)

        ###生成图像
        im_PIL_TEMP = Image.frombuffer('RGB', (bmpinfo['bmWidth'], bmpinfo['bmHeight']), bmpstr, 'raw', 'BGRX', 0, 1)

        img = cv2.cvtColor(np.asarray(im_PIL_TEMP), cv2.COLOR_RGB2BGR)
        # if bor:
        #     img = image_binarization(img)
        # cv2.imshow('img',img)
        # cv2.waitKey(0)
        # array_bytes = img.tobytes()  # 或者使用img.tostring()

        # 对数组的图片格式进行编码
        # success, encoded_image = cv2.imencode(".png", img)
        #img_bytes = np.array(cv2.imencode('.png', img)[1]).tobytes()
        # 将数组转为bytes

        # img_bytes = encoded_image.tostring()
        result = self.reader.readtext(img)
        if result!=[]:
            return result[0][-2]
        else:
            return ''
    
